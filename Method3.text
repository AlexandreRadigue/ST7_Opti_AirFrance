{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <font color=blue><div align=\"center\">Seats Allocation within an Aircraft</div></font>\n",
    "\n",
    "### <font color=blue><div align=\"center\">29-02-2024</div></font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Basic modules\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.table import Table\n",
    "import random\n",
    "\n",
    "# Gurobi module\n",
    "from gurobipy import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the Excel file into a pandas DataFrame\n",
    "\n",
    "\n",
    "df_21Oct = pd.read_excel('./ST7 - AirFrance/DataSeating 2024.xlsx', sheet_name=0 , skipfooter=2)\n",
    "df_22Oct = pd.read_excel('./ST7 - AirFrance/DataSeating 2024.xlsx', sheet_name=1 , skipfooter=2)\n",
    "df_23Oct = pd.read_excel('./ST7 - AirFrance/DataSeating 2024.xlsx', sheet_name=2 , skipfooter=2)\n",
    "df_24Oct = pd.read_excel('./ST7 - AirFrance/DataSeating 2024.xlsx', sheet_name=3 , skipfooter=2)\n",
    "df_30Oct = pd.read_excel('./ST7 - AirFrance/DataSeating 2024.xlsx', sheet_name=4 , skipfooter=2)\n",
    "df_05Nov = pd.read_excel('./ST7 - AirFrance/DataSeating 2024.xlsx', sheet_name=5 , skipfooter=2)\n",
    "df_07Nov = pd.read_excel('./ST7 - AirFrance/DataSeating 2024.xlsx', sheet_name=6 , skipfooter=2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display the DataFrame\n",
    "df = df_07Nov\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The code in the cells below creates a dictionary Passengers defined as follows:\n",
    "\n",
    "- Passengers Keys: IDs of passengers.\n",
    "- Passengers Items: For each ID in Passengers, we specify its *type* (female: 0, male: 1, disabled: 2), its *group number*, and its *transit time*.\n",
    "\n",
    "Notice that for passengers with a transit time equal to 0 or larger than 2 hours, the transit time in the dictionary is set to $\\infty$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_TransitTime(time_val):\n",
    "\n",
    "    # Convert time to minutes\n",
    "    total_minutes = time_val.hour * 60 + time_val.minute\n",
    "    \n",
    "    # Check if total minutes is greater than 2 hours or equal to 0\n",
    "    if total_minutes > 120 or total_minutes == 0:\n",
    "        return float('inf')  # Return infinity\n",
    "    else:\n",
    "        return total_minutes\n",
    "\n",
    "df['TransitTime'] = df['TransitTime'].apply(convert_TransitTime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: {'type': 0, 'group': 1, 'transit': 55.0},\n",
       " 2: {'type': 1, 'group': 2, 'transit': inf},\n",
       " 3: {'type': 0, 'group': 3, 'transit': 75.0},\n",
       " 4: {'type': 0, 'group': 4, 'transit': inf},\n",
       " 5: {'type': 1, 'group': 4, 'transit': inf},\n",
       " 6: {'type': 0, 'group': 5, 'transit': inf},\n",
       " 7: {'type': 0, 'group': 6, 'transit': inf},\n",
       " 8: {'type': 0, 'group': 6, 'transit': inf},\n",
       " 9: {'type': 2, 'group': 7, 'transit': inf},\n",
       " 10: {'type': 0, 'group': 8, 'transit': inf},\n",
       " 11: {'type': 1, 'group': 8, 'transit': inf},\n",
       " 12: {'type': 1, 'group': 8, 'transit': inf},\n",
       " 13: {'type': 1, 'group': 8, 'transit': inf},\n",
       " 14: {'type': 1, 'group': 8, 'transit': inf},\n",
       " 15: {'type': 0, 'group': 9, 'transit': inf},\n",
       " 16: {'type': 0, 'group': 9, 'transit': inf},\n",
       " 17: {'type': 0, 'group': 9, 'transit': inf},\n",
       " 18: {'type': 0, 'group': 9, 'transit': inf},\n",
       " 19: {'type': 0, 'group': 10, 'transit': inf},\n",
       " 20: {'type': 0, 'group': 11, 'transit': inf},\n",
       " 21: {'type': 1, 'group': 11, 'transit': inf},\n",
       " 22: {'type': 0, 'group': 12, 'transit': inf},\n",
       " 23: {'type': 0, 'group': 12, 'transit': inf},\n",
       " 24: {'type': 0, 'group': 12, 'transit': inf},\n",
       " 25: {'type': 0, 'group': 12, 'transit': inf},\n",
       " 26: {'type': 0, 'group': 12, 'transit': inf},\n",
       " 27: {'type': 0, 'group': 13, 'transit': 75.0},\n",
       " 28: {'type': 0, 'group': 13, 'transit': 75.0},\n",
       " 29: {'type': 2, 'group': 13, 'transit': 75.0},\n",
       " 30: {'type': 2, 'group': 13, 'transit': 75.0},\n",
       " 31: {'type': 0, 'group': 14, 'transit': 55.0},\n",
       " 32: {'type': 0, 'group': 14, 'transit': 55.0},\n",
       " 33: {'type': 0, 'group': 14, 'transit': 55.0},\n",
       " 34: {'type': 0, 'group': 14, 'transit': 55.0},\n",
       " 35: {'type': 1, 'group': 14, 'transit': 55.0},\n",
       " 36: {'type': 0, 'group': 15, 'transit': inf},\n",
       " 37: {'type': 2, 'group': 16, 'transit': 55.0},\n",
       " 38: {'type': 0, 'group': 17, 'transit': inf},\n",
       " 39: {'type': 1, 'group': 17, 'transit': inf},\n",
       " 40: {'type': 0, 'group': 18, 'transit': 75.0},\n",
       " 41: {'type': 0, 'group': 18, 'transit': 75.0},\n",
       " 42: {'type': 0, 'group': 18, 'transit': 75.0},\n",
       " 43: {'type': 0, 'group': 18, 'transit': 75.0},\n",
       " 44: {'type': 0, 'group': 18, 'transit': 75.0},\n",
       " 45: {'type': 0, 'group': 19, 'transit': inf},\n",
       " 46: {'type': 0, 'group': 20, 'transit': 75.0},\n",
       " 47: {'type': 0, 'group': 20, 'transit': 75.0},\n",
       " 48: {'type': 2, 'group': 21, 'transit': inf},\n",
       " 49: {'type': 0, 'group': 22, 'transit': inf},\n",
       " 50: {'type': 0, 'group': 23, 'transit': inf},\n",
       " 51: {'type': 1, 'group': 23, 'transit': inf},\n",
       " 52: {'type': 1, 'group': 23, 'transit': inf},\n",
       " 53: {'type': 0, 'group': 24, 'transit': 75.0},\n",
       " 54: {'type': 0, 'group': 24, 'transit': 75.0},\n",
       " 55: {'type': 0, 'group': 24, 'transit': 75.0},\n",
       " 56: {'type': 0, 'group': 24, 'transit': 75.0},\n",
       " 57: {'type': 0, 'group': 25, 'transit': inf},\n",
       " 58: {'type': 1, 'group': 26, 'transit': 55.0},\n",
       " 59: {'type': 2, 'group': 26, 'transit': 55.0},\n",
       " 60: {'type': 2, 'group': 26, 'transit': 55.0},\n",
       " 61: {'type': 0, 'group': 27, 'transit': inf},\n",
       " 62: {'type': 1, 'group': 27, 'transit': inf},\n",
       " 63: {'type': 1, 'group': 28, 'transit': inf},\n",
       " 64: {'type': 1, 'group': 29, 'transit': inf},\n",
       " 65: {'type': 1, 'group': 30, 'transit': inf},\n",
       " 66: {'type': 0, 'group': 31, 'transit': inf},\n",
       " 67: {'type': 0, 'group': 32, 'transit': inf},\n",
       " 68: {'type': 1, 'group': 33, 'transit': 55.0},\n",
       " 69: {'type': 1, 'group': 34, 'transit': inf},\n",
       " 70: {'type': 0, 'group': 35, 'transit': inf},\n",
       " 71: {'type': 0, 'group': 36, 'transit': 55.0},\n",
       " 72: {'type': 1, 'group': 36, 'transit': 55.0},\n",
       " 73: {'type': 0, 'group': 37, 'transit': inf},\n",
       " 74: {'type': 0, 'group': 38, 'transit': inf},\n",
       " 75: {'type': 0, 'group': 38, 'transit': inf},\n",
       " 76: {'type': 1, 'group': 38, 'transit': inf},\n",
       " 77: {'type': 0, 'group': 39, 'transit': inf},\n",
       " 78: {'type': 1, 'group': 39, 'transit': inf},\n",
       " 79: {'type': 1, 'group': 40, 'transit': inf},\n",
       " 80: {'type': 1, 'group': 41, 'transit': inf},\n",
       " 81: {'type': 1, 'group': 41, 'transit': inf},\n",
       " 82: {'type': 0, 'group': 42, 'transit': 55.0},\n",
       " 83: {'type': 1, 'group': 42, 'transit': 55.0},\n",
       " 84: {'type': 1, 'group': 43, 'transit': 75.0},\n",
       " 85: {'type': 1, 'group': 44, 'transit': inf},\n",
       " 86: {'type': 1, 'group': 45, 'transit': inf},\n",
       " 87: {'type': 0, 'group': 46, 'transit': inf},\n",
       " 88: {'type': 0, 'group': 46, 'transit': inf},\n",
       " 89: {'type': 0, 'group': 46, 'transit': inf},\n",
       " 90: {'type': 0, 'group': 46, 'transit': inf},\n",
       " 91: {'type': 0, 'group': 46, 'transit': inf},\n",
       " 92: {'type': 0, 'group': 47, 'transit': inf},\n",
       " 93: {'type': 1, 'group': 48, 'transit': inf},\n",
       " 94: {'type': 1, 'group': 49, 'transit': inf},\n",
       " 95: {'type': 1, 'group': 50, 'transit': inf},\n",
       " 96: {'type': 1, 'group': 51, 'transit': inf},\n",
       " 97: {'type': 2, 'group': 51, 'transit': inf},\n",
       " 98: {'type': 0, 'group': 52, 'transit': inf},\n",
       " 99: {'type': 0, 'group': 53, 'transit': inf},\n",
       " 100: {'type': 1, 'group': 54, 'transit': inf},\n",
       " 101: {'type': 1, 'group': 55, 'transit': inf},\n",
       " 102: {'type': 1, 'group': 56, 'transit': inf},\n",
       " 103: {'type': 0, 'group': 57, 'transit': inf},\n",
       " 104: {'type': 0, 'group': 57, 'transit': inf},\n",
       " 105: {'type': 1, 'group': 57, 'transit': inf},\n",
       " 106: {'type': 1, 'group': 57, 'transit': inf},\n",
       " 107: {'type': 1, 'group': 58, 'transit': inf},\n",
       " 108: {'type': 1, 'group': 59, 'transit': inf},\n",
       " 109: {'type': 1, 'group': 60, 'transit': inf},\n",
       " 110: {'type': 1, 'group': 60, 'transit': inf},\n",
       " 111: {'type': 1, 'group': 61, 'transit': inf},\n",
       " 112: {'type': 0, 'group': 62, 'transit': inf},\n",
       " 113: {'type': 1, 'group': 63, 'transit': 75.0},\n",
       " 114: {'type': 1, 'group': 64, 'transit': 55.0},\n",
       " 115: {'type': 0, 'group': 65, 'transit': inf},\n",
       " 116: {'type': 0, 'group': 65, 'transit': inf},\n",
       " 117: {'type': 1, 'group': 65, 'transit': inf},\n",
       " 118: {'type': 1, 'group': 65, 'transit': inf},\n",
       " 119: {'type': 0, 'group': 66, 'transit': inf},\n",
       " 120: {'type': 0, 'group': 67, 'transit': inf},\n",
       " 121: {'type': 1, 'group': 67, 'transit': inf},\n",
       " 122: {'type': 1, 'group': 68, 'transit': inf},\n",
       " 123: {'type': 1, 'group': 69, 'transit': inf},\n",
       " 124: {'type': 1, 'group': 70, 'transit': inf},\n",
       " 125: {'type': 0, 'group': 71, 'transit': inf},\n",
       " 126: {'type': 1, 'group': 72, 'transit': 55.0},\n",
       " 127: {'type': 0, 'group': 73, 'transit': 75.0},\n",
       " 128: {'type': 1, 'group': 73, 'transit': 75.0},\n",
       " 129: {'type': 0, 'group': 74, 'transit': inf},\n",
       " 130: {'type': 0, 'group': 74, 'transit': inf},\n",
       " 131: {'type': 1, 'group': 74, 'transit': inf},\n",
       " 132: {'type': 0, 'group': 75, 'transit': inf},\n",
       " 133: {'type': 0, 'group': 75, 'transit': inf},\n",
       " 134: {'type': 1, 'group': 75, 'transit': inf},\n",
       " 135: {'type': 0, 'group': 76, 'transit': inf},\n",
       " 136: {'type': 1, 'group': 76, 'transit': inf},\n",
       " 137: {'type': 1, 'group': 77, 'transit': inf},\n",
       " 138: {'type': 1, 'group': 78, 'transit': inf},\n",
       " 139: {'type': 1, 'group': 79, 'transit': inf},\n",
       " 140: {'type': 1, 'group': 79, 'transit': inf},\n",
       " 141: {'type': 1, 'group': 80, 'transit': 75.0},\n",
       " 142: {'type': 0, 'group': 81, 'transit': 55.0},\n",
       " 143: {'type': 1, 'group': 81, 'transit': 55.0},\n",
       " 144: {'type': 0, 'group': 82, 'transit': inf},\n",
       " 145: {'type': 1, 'group': 82, 'transit': inf},\n",
       " 146: {'type': 1, 'group': 82, 'transit': inf},\n",
       " 147: {'type': 0, 'group': 83, 'transit': inf},\n",
       " 148: {'type': 1, 'group': 83, 'transit': inf},\n",
       " 149: {'type': 1, 'group': 83, 'transit': inf},\n",
       " 150: {'type': 1, 'group': 84, 'transit': inf},\n",
       " 151: {'type': 1, 'group': 84, 'transit': inf},\n",
       " 152: {'type': 1, 'group': 85, 'transit': inf},\n",
       " 153: {'type': 1, 'group': 85, 'transit': inf},\n",
       " 154: {'type': 0, 'group': 86, 'transit': inf},\n",
       " 155: {'type': 2, 'group': 86, 'transit': inf},\n",
       " 156: {'type': 0, 'group': 87, 'transit': inf},\n",
       " 157: {'type': 0, 'group': 88, 'transit': inf},\n",
       " 158: {'type': 0, 'group': 88, 'transit': inf},\n",
       " 159: {'type': 1, 'group': 88, 'transit': inf},\n",
       " 160: {'type': 0, 'group': 89, 'transit': inf},\n",
       " 161: {'type': 0, 'group': 89, 'transit': inf},\n",
       " 162: {'type': 1, 'group': 89, 'transit': inf}}"
      ]
     },
     "execution_count": 260,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create Passengers dictionary\n",
    "Passengers = dict()\n",
    "i = 1\n",
    "\n",
    "number_f = 0\n",
    "number_m = 0\n",
    "number_d = 0\n",
    "\n",
    "transit_times = set()\n",
    "\n",
    "# Groups : dict[int : List[int]]\n",
    "\n",
    "Passengers = dict()\n",
    "i = 1\n",
    "\n",
    "for group in df.itertuples():\n",
    "    if not pd.isna(group[2]):\n",
    "        for k in range(int(group[2])):\n",
    "            Passengers[i] = {'type': 0, 'group':group[1], 'transit':group[5]}\n",
    "            number_f += 1\n",
    "            transit_times.add(group[5])\n",
    "            i+=1\n",
    "    if not pd.isna(group[3]):\n",
    "        for k in range(int(group[3])):\n",
    "            Passengers[i] = {'type': 1, 'group':group[1], 'transit':group[5]}\n",
    "            number_m += 1\n",
    "            transit_times.add(group[5])\n",
    "            i+=1\n",
    "    if not pd.isna(group[4]):\n",
    "        for k in range(int(group[4])):\n",
    "            Passengers[i] = {'type': 2, 'group':group[1], 'transit':group[5]}\n",
    "            number_d += 1\n",
    "            transit_times.add(group[5])\n",
    "            i+=1\n",
    "    \n",
    "    \n",
    "Passengers "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We define a dictionnary *Groups*, containing as keys the group ID and as valuea, the list of the members of the group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Groups = dict()\n",
    "\n",
    "\n",
    "for i, passager in Passengers.items():\n",
    "\n",
    "    if passager['group'] in Groups:\n",
    "        Groups[passager['group']].append(i)\n",
    "    else :\n",
    "        Groups[passager['group']] = [i]\n",
    "\n",
    "Keys = list(Groups.keys()).copy()\n",
    "\n",
    "\n",
    "for i in Keys:\n",
    "        if len(Groups[i]) ==1: del(Groups[i])\n",
    "Groups"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Definition of parameters necessary for the following steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "weight_f = 70\n",
    "weight_m = 85\n",
    "weight_d = 92.5\n",
    "\n",
    "if sum([4*number_d,number_f,number_m]) <= 174 :\n",
    "    number_of_rows = 29 #Aircraft model A320\n",
    "else :\n",
    "    number_of_rows = 35 #Aircraft model A321\n",
    "\n",
    "number_of_columns = 7 # adding the aisle\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defining the relevant variables of the problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The binary variables $AssignmentVarDict_{i,j,k}$ specify whether the seat located at position $(i,j)$ is occupied by passenger $k$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "m = Model(\"Seats_Allocation\")\n",
    "\n",
    "AssignmenVarDict = {(i, j, k) : m.addVar(vtype = GRB.BINARY, name=f'passager_{i}_{j}_{k}')\n",
    "                    for i in range(1, number_of_rows + 1)\n",
    "                    for j in range(1, number_of_columns + 1)\n",
    "                    for k in range(1, len(Passengers)+1)}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The integer variables $i_{\\text{min}}[g]$ and $i_{\\text{max}}[g]$ (resp. $j_{\\text{min}}[g]$ and $j_{\\text{max}}[g]$) give the value\n",
    "of $i$ (resp. the value of $j$) that is the smallest and the largest \\\n",
    "in group $g$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Variables i_{min}, i_{max}, j_{min} et j_{max}\n",
    "i_min = {g : m.addVar(vtype = GRB.INTEGER, lb = 1 , ub = number_of_rows , name=f'i_min({g})') \n",
    "            for g in Groups.keys()}\n",
    "\n",
    "i_max = {g : m.addVar(vtype = GRB.INTEGER, lb = 1 , ub = number_of_rows , name=f'i_max({g})') \n",
    "            for g in Groups.keys()}\n",
    "\n",
    "j_min = {g : m.addVar(vtype = GRB.INTEGER, lb = 1 , ub = number_of_columns , name=f'j_min({g})') \n",
    "            for g in Groups.keys()}\n",
    "\n",
    "j_max = {g : m.addVar(vtype = GRB.INTEGER, lb = 1 , ub = number_of_columns  , name=f'j_max({g})') \n",
    "            for g in Groups.keys()}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The constraints "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Constraints related to the definition of variables $i_{\\text{min}}[g]$, $i_{\\text{max}}[g]$, $j_{\\text{min}}[g]$, $j_{\\text{max}}[g]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "i_min_Passagers_Group = {(g,p) : m.addConstr(i_min[g] <= quicksum([i*AssignmenVarDict[(i,j,p)] \n",
    "                                                  for i in range(1, number_of_rows + 1) \n",
    "                                                  for j in range(1, number_of_columns + 1)]), \n",
    "                                                  name = f'i_min_Passager_{p}Group_{g}') \n",
    "                                                  for g in Groups.keys()\n",
    "                                                  for p in Groups[g]\n",
    "                                                  }\n",
    "\n",
    "i_max_Passagers_Group = {(g,p) : m.addConstr(i_max[g] >= quicksum([i*AssignmenVarDict[(i,j,p)] \n",
    "                                                  for i in range(1, number_of_rows + 1) \n",
    "                                                  for j in range(1, number_of_columns + 1)]), \n",
    "                                                  name = f'i_max_Passager_{p}Group_{g}') \n",
    "                                                  for g in Groups.keys()\n",
    "                                                  for p in Groups[g]\n",
    "                                                  }\n",
    "\n",
    "j_min_Passagers_Group = {(g,p) : m.addConstr(j_min[g] <= quicksum([j*AssignmenVarDict[(i,j,p)] \n",
    "                                                  for i in range(1, number_of_rows + 1) \n",
    "                                                  for j in range(1, number_of_columns + 1)]), \n",
    "                                                  name = f'j_min_Passager_{p}Group_{g}') \n",
    "                                                  for g in Groups.keys()\n",
    "                                                  for p in Groups[g]\n",
    "                                                  }\n",
    "\n",
    "j_max_Passagers_Group = {(g,p) : m.addConstr(j_max[g] >= quicksum([j*AssignmenVarDict[(i,j,p)] \n",
    "                                                  for i in range(1, number_of_rows + 1) \n",
    "                                                  for j in range(1, number_of_columns + 1)]), \n",
    "                                                  name = f'j_max_Passager_{p}Group_{g}') \n",
    "                                                  for g in Groups.keys()\n",
    "                                                  for p in Groups[g]\n",
    "                                                  }\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Every person has one seat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [],
   "source": [
    "PERSONSEATCONSTDIC = { k: m.addConstr(quicksum([AssignmenVarDict[(i, j, k)]\n",
    "                                                for i in range(1, number_of_rows + 1)\n",
    "                                                for j in range(1, number_of_columns + 1) ])\n",
    "                                                == 1)\n",
    "                                                for k in range(1,len(Passengers)+1) }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Every seat is allocated to a single person"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "ALLOCATIONCONSTDIC = { (i,j) : m.addConstr(quicksum([AssignmenVarDict[(i,j,k)]\n",
    "                                                     for k in range(1, len(Passengers)+1)])\n",
    "                                                     <=1)\n",
    "                                                     for i in range(1, number_of_rows + 1)\n",
    "                                                     for j in range(1, number_of_columns+1) }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Aisle seats are always free"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "AISLECONSTDIC = { i : m.addConstr(quicksum([AssignmenVarDict[(i,4,k)]\n",
    "                                                     for k in range(1, len(Passengers)+1)])\n",
    "                                                     == 0)\n",
    "                                                     for i in range(1, number_of_rows + 1)   \n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Barycenter constraint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "i_m = quicksum([weight_m * i* AssignmenVarDict[(i,j,k)]\n",
    "                for i in range(1, number_of_rows+1)\n",
    "                for j in range(1, number_of_columns+1 )\n",
    "                for k in range(1, len(Passengers)+1)\n",
    "                if Passengers[k]['type']==1])\n",
    "\n",
    "i_f = quicksum([weight_m * i* AssignmenVarDict[(i,j,k)]\n",
    "                for i in range(1, number_of_rows+1)\n",
    "                for j in range(1, number_of_columns+1 )\n",
    "                for k in range(1, len(Passengers)+1)\n",
    "                if Passengers[k]['type']==0])\n",
    "\n",
    "i_d = quicksum([weight_m * i* AssignmenVarDict[(i,j,k)]\n",
    "                for i in range(1, number_of_rows+1)\n",
    "                for j in range(1, number_of_columns+1 )\n",
    "                for k in range(1, len(Passengers)+1)\n",
    "                if Passengers[k]['type']==2])\n",
    "\n",
    "i_bary = (i_m + i_f +i_d)/( weight_d* number_d + weight_f * number_f + weight_m * number_m)\n",
    "\n",
    "j_m = quicksum([weight_m * j* AssignmenVarDict[(i,j,k)]\n",
    "                for i in range(1, number_of_rows+1)\n",
    "                for j in range(1, number_of_columns+1 )\n",
    "                for k in range(1, len(Passengers)+1)\n",
    "                if Passengers[k]['type']==1])\n",
    "\n",
    "j_f = quicksum([weight_m * j* AssignmenVarDict[(i,j,k)]\n",
    "                for i in range(1, number_of_rows+1)\n",
    "                for j in range(1, number_of_columns+1 )\n",
    "                for k in range(1, len(Passengers)+1)\n",
    "                if Passengers[k]['type']==0])\n",
    "\n",
    "j_d = quicksum([weight_m * j* AssignmenVarDict[(i,j,k)]\n",
    "                for i in range(1, number_of_rows+1)\n",
    "                for j in range(1, number_of_columns+1 )\n",
    "                for k in range(1, len(Passengers)+1)\n",
    "                if Passengers[k]['type']==2])\n",
    "\n",
    "j_bary = (j_m + j_f + j_d)/( weight_d* number_d + weight_f * number_f + weight_m * number_m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [],
   "source": [
    "IMAXBARYCONST = m.addConstr(i_bary <= 17)\n",
    "IMINBARYCONST = m.addConstr(13 <= i_bary)\n",
    "JMAXBARYCONST = m.addConstr(j_bary <= 5)\n",
    "JMINBARYCONST = m.addConstr(3 <= j_bary )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- A disabeled person has 4 seats on the aisle side"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "SeatPer_WCHR_CONST = {k: m.addConstr(quicksum([AssignmenVarDict[(i, j, k)] \n",
    "                                               for i in range(1, number_of_rows ) \n",
    "                                               for j in [3, 6] \n",
    "                                               ]) == 1, name=f\"SeatPerWCHR{k}\")\n",
    "                                               for k in range(1, len(Passengers) + 1)\n",
    "                                               if Passengers[k]['type'] == 2}\n",
    "\n",
    "for k in range(1, len(Passengers) + 1):\n",
    "    if Passengers[k]['type'] == 2:\n",
    "        for i in range(1, number_of_rows):\n",
    "            for j in [3, 6]:\n",
    "                m.addConstr(AssignmenVarDict[(i, j, k)] + quicksum(\n",
    "                      [AssignmenVarDict[(i, j - 1, p)] for p in range(1, len(Passengers)+1)]\n",
    "                      ) <= 1, \n",
    "                            name=f'Neighbor_WCHR{k}_{i}_{j-1}')\n",
    "                \n",
    "                m.addConstr(AssignmenVarDict[(i, j, k)] +quicksum(\n",
    "                      [AssignmenVarDict[(i+1, j, p)] for p in range(1, len(Passengers)+1)]\n",
    "                      ) <= 1, \n",
    "                            name=f'Neighbor_WCHR{k}_{i+1}_{j}')\n",
    "                m.addConstr(AssignmenVarDict[(i, j, k)]+ quicksum(\n",
    "                      [AssignmenVarDict[(i+1, j - 1, p)] for p in range(1, len(Passengers)+1)]\n",
    "                      ) <= 1,  \n",
    "                            name=f'Neighbor_WCHR{k}_{i+1}_{j-1}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Time Objectif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Transit time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "transit_obj = quicksum( [ AssignmenVarDict[(i,j,k)]* i*(1/Passengers[k]['transit'])\n",
    "                      for i in range(1, number_of_rows+1)\n",
    "                      for j in range(1, number_of_columns+1 )\n",
    "                      for k in range(1, len(Passengers)+1)\n",
    "                      if Passengers[k]['transit'] != float('inf') ])\n",
    "\n",
    "m.setObjective(transit_obj, GRB.MINIMIZE)\n",
    "\n",
    "m.params.outputflag = 0 \n",
    "\n",
    "m.update()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                   z* = 2.63                                                    \n",
      "\n"
     ]
    }
   ],
   "source": [
    "m.optimize()\n",
    "iteration = 1\n",
    "\n",
    "if m.status == GRB.INF_OR_UNBD:\n",
    "    m.setParam(GRB.Param.Presolve, 0)\n",
    "    m.optimize()\n",
    "\n",
    "if m.status == GRB.INFEASIBLE:\n",
    "    print(m.display(), \"\\n\\tTHERE IS NO SOLUTION!!!\")\n",
    "elif m.status == GRB.UNBOUNDED:\n",
    "    print(m.display(), \"\\n\\tNOT BOUNDED!!!\")\n",
    "else:\n",
    "    print(f'z* = {round(m.objVal, 2)}'.center(8*14))\n",
    "\n",
    "print()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "z_old = round(transit_obj.getValue(), 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Transit time visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_blue_gradations(num_gradations):\n",
    "    gradations = []\n",
    "    for i in range(num_gradations):\n",
    "         # Linearly decrease the green component from full (255) to 0\n",
    "        green_intensity = int(255 * (1 - i / (num_gradations - 1)))\n",
    "        # Keep the red component at full intensity\n",
    "        red_intensity = 255\n",
    "        # Combine the components into a color value\n",
    "        color_value = f\"#{red_intensity:02X}{green_intensity:02X}00\"\n",
    "        gradations.append(color_value)\n",
    "    return gradations\n",
    "graduation = generate_blue_gradations(len(transit_times))\n",
    "transit_times = list(transit_times)\n",
    "transit_times.sort()\n",
    "color_transit = dict()\n",
    "for i in range(len(transit_times)):\n",
    "    color_transit[transit_times[i]] = graduation[-i-1]\n",
    "\n",
    "data1 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "data2 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "colors1 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "colors2 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "for i in range(1, number_of_rows + 1):\n",
    "    for j in range(1, number_of_columns + 1):\n",
    "        for k in range(1, len(Passengers) + 1):\n",
    "            if AssignmenVarDict[(i,j,k)].x == 1:\n",
    "                if j<4:\n",
    "                    data1[i-1][j-1] = k\n",
    "                    if Passengers[k]['transit']!=float('inf'): colors1[i-1][j-1] = color_transit[Passengers[k]['transit']]\n",
    "                elif j > 4 :\n",
    "                    data2[i-1][j-5] = k\n",
    "                    if Passengers[k]['transit']!=float('inf'): colors2[i-1][j-5] = color_transit[Passengers[k]['transit']]\n",
    "\n",
    "\n",
    "def create_table(ax, data, colors):\n",
    "    ax.set_axis_off()\n",
    "    table = Table(ax, bbox=[0, 0, 1, 2])\n",
    "    rows, cols = len(data), len(data[0])\n",
    "    width, height = 100 , 100 \n",
    "\n",
    "\n",
    "    for i in range(rows):\n",
    "        for j in range(cols):\n",
    "            table.add_cell(i, j, width, height, text=data[i][j], loc='center', facecolor=colors[i][j])\n",
    "\n",
    "    ax.add_table(table)\n",
    "\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2)\n",
    "\n",
    "create_table(ax1, data1, colors1)\n",
    "create_table(ax2, data2, colors2)\n",
    "\n",
    "\n",
    "ax1.annotate('Aisle', xy=(1, 1), xytext=(1.25, 1),\n",
    "             textcoords='axes fraction', ha='center', va='center', color='red', fontsize=14)\n",
    "\n",
    "\n",
    "\n",
    "plt.subplots_adjust(wspace=0.5)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Grouping Objectif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Set parameter OutputFlag to value 1\n"
     ]
    }
   ],
   "source": [
    "\n",
    "obj_grouping = quicksum([10*(i_max[g] - i_min[g]) + (j_max[g] - j_min[g])\n",
    "                        for g in Groups.keys()])\n",
    "\n",
    "m.setObjective(obj_grouping, GRB.MINIMIZE)\n",
    "\n",
    "m.params.outputflag = 1\n",
    "\n",
    "m.update()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimisation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Set parameter TimeLimit to value 100\n",
      "Gurobi Optimizer version 11.0.0 build v11.0.0rc2 (win64 - Windows 10.0 (19045.2))\n",
      "\n",
      "CPU model: 12th Gen Intel(R) Core(TM) i7-1255U, instruction set [SSE2|AVX|AVX2]\n",
      "Thread count: 10 physical cores, 12 logical processors, using up to 12 threads\n",
      "\n",
      "Optimize a model with 2739 rows, 39846 columns and 653898 nonzeros\n",
      "Model fingerprint: 0xa2dc190b\n",
      "Variable types: 0 continuous, 39846 integer (39690 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [7e-03, 4e+01]\n",
      "  Objective range  [1e+00, 1e+01]\n",
      "  Bounds range     [1e+00, 4e+01]\n",
      "  RHS range        [1e+00, 2e+01]\n",
      "\n",
      "Loaded MIP start from previous solve with objective 13494\n",
      "\n",
      "Presolve removed 204 rows and 6948 columns\n",
      "Presolve time: 0.83s\n",
      "Presolved: 2535 rows, 32898 columns, 533311 nonzeros\n",
      "Variable types: 0 continuous, 32898 integer (32742 binary)\n",
      "Found heuristic solution: objective 2932.0000000\n",
      "Deterministic concurrent LP optimizer: primal simplex, dual simplex, and barrier\n",
      "Showing barrier log only...\n",
      "\n",
      "Root barrier log...\n",
      "\n",
      "Ordering time: 0.00s\n",
      "\n",
      "Barrier statistics:\n",
      " AA' NZ     : 4.418e+04\n",
      " Factor NZ  : 6.213e+04 (roughly 2 MB of memory)\n",
      " Factor Ops : 4.277e+06 (less than 1 second per iteration)\n",
      " Threads    : 8\n",
      "\n",
      "                  Objective                Residual\n",
      "Iter       Primal          Dual         Primal    Dual     Compl     Time\n",
      "   0   1.43849216e+01 -1.31037818e+05  5.21e+03 3.36e-01  4.23e+03     1s\n",
      "   1   3.87260875e+03 -2.69450383e+05  1.78e+03 6.82e-13  1.31e+03     1s\n",
      "   2   9.59603923e+02 -1.98957277e+05  2.74e+02 3.41e-13  2.22e+02     1s\n",
      "   3   7.66225761e+02 -1.11870193e+05  3.19e+01 1.99e-13  4.03e+01     1s\n",
      "   4   3.64487409e+02 -3.77881659e+04  1.31e+01 1.14e-13  1.21e+01     1s\n",
      "   5   1.49431229e+02 -9.62563012e+03  4.06e+00 2.13e-14  2.70e+00     1s\n",
      "   6   2.41625211e+01 -2.15813343e+03  2.96e-01 3.15e-14  4.63e-01     1s\n",
      "   7   4.79602906e+00 -1.19843636e+02  2.17e-02 8.05e-14  2.55e-02     1s\n",
      "   8   2.65878317e+00 -1.00217223e+01  5.86e-04 2.45e-14  2.59e-03     1s\n",
      "   9   2.88188408e-01 -1.49162842e+00  9.72e-06 7.69e-14  3.63e-04     1s\n",
      "  10   1.16057653e-03 -4.99451241e-03  2.23e-08 8.34e-14  1.25e-06     1s\n",
      "  11   1.41248667e-06 -4.99505864e-06  3.89e-12 8.50e-14  1.30e-09     1s\n",
      "  12   1.05027098e-11 -3.09796633e-11  1.69e-13 6.75e-14  7.25e-15     1s\n",
      "\n",
      "Barrier solved model in 12 iterations and 1.17 seconds (2.06 work units)\n",
      "Optimal objective 1.05027098e-11\n",
      "\n",
      "Concurrent spin time: 0.05s\n",
      "\n",
      "Solved with primal simplex\n",
      "\n",
      "Use crossover to convert LP symmetric solution to basic solution...\n",
      "\n",
      "Root relaxation: objective -4.835243e-12, 6182 iterations, 0.29 seconds (0.28 work units)\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0   -0.00000    0  505 2932.00000   -0.00000   100%     -   13s\n",
      "H    0     0                    1928.0000000   -0.00000   100%     -   14s\n",
      "     0     0    0.00000    0  554 1928.00000    0.00000   100%     -   18s\n",
      "H    0     0                    1629.0000000    0.00000   100%     -   45s\n",
      "     0     0    0.00000    0  605 1629.00000    0.00000   100%     -   47s\n",
      "     0     0    0.00000    0  506 1629.00000    0.00000   100%     -   78s\n",
      "H    0     0                    1231.0000000    0.00000   100%     -   84s\n",
      "     0     0    0.00000    0  571 1231.00000    0.00000   100%     -   87s\n",
      "     0     0    0.00000    0  596 1231.00000    0.00000   100%     -   91s\n",
      "     0     0    0.00000    0  649 1231.00000    0.00000   100%     -   95s\n",
      "     0     0    0.00000    0  636 1231.00000    0.00000   100%     -  100s\n",
      "\n",
      "Cutting planes:\n",
      "  Clique: 73\n",
      "  MIR: 130\n",
      "  StrongCG: 29\n",
      "  Zero half: 14\n",
      "  Relax-and-lift: 17\n",
      "\n",
      "Explored 1 nodes (120210 simplex iterations) in 100.09 seconds (69.14 work units)\n",
      "Thread count was 12 (of 12 available processors)\n",
      "\n",
      "Solution count 5: 1231 1629 1928 ... 13494\n",
      "\n",
      "Time limit reached\n",
      "Best objective 1.231000000000e+03, best bound 1.451230247085e-10, gap 100.0000%\n",
      "                                                  z* = 1231.0                                                   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Set iteration limit\n",
    "m.setParam(GRB.Param.TimeLimit, 100)  # Change to the desired iteration limit\n",
    "\n",
    "m.optimize()\n",
    "iteration = 1\n",
    "\n",
    "if m.status == GRB.INF_OR_UNBD:\n",
    "    m.setParam(GRB.Param.Presolve, 0)\n",
    "    m.optimize()\n",
    "\n",
    "if m.status == GRB.INFEASIBLE:\n",
    "    print(m.display(), \"\\n\\tTHERE IS NO SOLUTION!!!\")\n",
    "elif m.status == GRB.UNBOUNDED:\n",
    "    print(m.display(), \"\\n\\tNOT BOUNDED!!!\")\n",
    "else:\n",
    "    print(f'z* = {round(m.objVal, 2)}'.center(8*14))\n",
    "\n",
    "print()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Grouping visualisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def generate_random_colors(num_colors):\n",
    "    colors = []\n",
    "    for _ in range(num_colors):\n",
    "\n",
    "        red = random.randint(0, 255)\n",
    "        green = random.randint(0, 255)\n",
    "        blue = random.randint(0, 255)\n",
    "\n",
    "        color_value = \"#{:02X}{:02X}{:02X}\".format(red, green, blue)\n",
    "        colors.append(color_value)\n",
    "    return colors\n",
    "\n",
    "graduation = generate_random_colors(len(Groups))\n",
    "indices_groups = list(Groups.keys())\n",
    "color_group = {indices_groups[i-1] : graduation[i-1] for i in range(1, len(Groups)+1) }\n",
    "\n",
    "\n",
    "data1 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "data2 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "colors1 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "colors2 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "for i in range(1, number_of_rows + 1):\n",
    "    for j in range(1, number_of_columns + 1):\n",
    "        for k in range(1, len(Passengers) + 1):\n",
    "            if AssignmenVarDict[(i,j,k)].x == 1:\n",
    "                if j<4:\n",
    "                    data1[i-1][j-1] = k\n",
    "                    if Passengers[k]['group']in color_group: colors1[i-1][j-1] = color_group[Passengers[k]['group']]\n",
    "                else:\n",
    "                    data2[i-1][j-5] = k\n",
    "                    if Passengers[k]['group'] in color_group: colors2[i-1][j-5] = color_group[Passengers[k]['group']]\n",
    "\n",
    "                    \n",
    "def create_table(ax, data, colors):\n",
    "    ax.set_axis_off()\n",
    "    table = Table(ax, bbox=[0, 0, 1, 2])\n",
    "    rows, cols = len(data), len(data[0])\n",
    "    width, height = 100 , 100 \n",
    "\n",
    "\n",
    "    for i in range(rows):\n",
    "        for j in range(cols):\n",
    "            table.add_cell(i, j, width, height, text=data[i][j], loc='center', facecolor=colors[i][j])\n",
    "\n",
    "    ax.add_table(table)\n",
    "\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2)\n",
    "\n",
    "create_table(ax1, data1, colors1)\n",
    "create_table(ax2, data2, colors2)\n",
    "\n",
    "\n",
    "ax1.annotate('Aisle', xy=(1, 1), xytext=(1.25, 1),\n",
    "             textcoords='axes fraction', ha='center', va='center', color='red', fontsize=14)\n",
    "\n",
    "\n",
    "\n",
    "plt.subplots_adjust(wspace=0.5)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coupling both objectives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.setObjective(0.7*obj_grouping + 0.3*transit_obj, GRB.MINIMIZE)\n",
    "\n",
    "m.params.outputflag = 1\n",
    "\n",
    "m.update()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 11.0.0 build v11.0.0rc2 (win64 - Windows 10.0 (19045.2))\n",
      "\n",
      "CPU model: 12th Gen Intel(R) Core(TM) i7-1255U, instruction set [SSE2|AVX|AVX2]\n",
      "Thread count: 10 physical cores, 12 logical processors, using up to 12 threads\n",
      "\n",
      "Optimize a model with 2739 rows, 39846 columns and 653898 nonzeros\n",
      "Model fingerprint: 0x4defe3ab\n",
      "Variable types: 0 continuous, 39846 integer (39690 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [7e-03, 4e+01]\n",
      "  Objective range  [4e-03, 7e+00]\n",
      "  Bounds range     [1e+00, 4e+01]\n",
      "  RHS range        [1e+00, 2e+01]\n",
      "\n",
      "Loaded MIP start from previous solve with objective 863.052\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Presolve removed 204 rows and 6948 columns\n",
      "Presolve time: 1.29s\n",
      "Presolved: 2535 rows, 32898 columns, 533311 nonzeros\n",
      "Variable types: 0 continuous, 32898 integer (32742 binary)\n",
      "Found heuristic solution: objective 862.9083636\n",
      "Deterministic concurrent LP optimizer: primal simplex, dual simplex, and barrier\n",
      "Showing barrier log only...\n",
      "\n",
      "Root barrier log...\n",
      "\n",
      "Ordering time: 0.00s\n",
      "\n",
      "Barrier statistics:\n",
      " AA' NZ     : 8.581e+04\n",
      " Factor NZ  : 1.154e+05 (roughly 3 MB of memory)\n",
      " Factor Ops : 1.177e+07 (less than 1 second per iteration)\n",
      " Threads    : 8\n",
      "\n",
      "                  Objective                Residual\n",
      "Iter       Primal          Dual         Primal    Dual     Compl     Time\n",
      "   0   1.66913565e+03 -1.06143721e+05  8.60e+03 1.35e-01  1.85e+03     2s\n",
      "   1   2.59133629e+03 -1.63170969e+05  3.46e+03 3.41e-13  6.74e+02     2s\n",
      "   2   9.09739845e+02 -1.22888702e+05  4.22e+02 6.25e-13  9.12e+01     2s\n",
      "   3   8.16766757e+02 -1.01080994e+05  1.21e+02 5.68e-13  3.37e+01     2s\n",
      "   4   6.47124631e+02 -1.01741267e+05  5.92e+01 5.68e-13  2.23e+01     2s\n",
      "   5   4.39142801e+02 -3.57107608e+04  1.74e+01 3.98e-13  6.29e+00     2s\n",
      "   6   3.73973921e+02 -8.55434230e+03  1.45e+01 2.84e-13  1.83e+00     2s\n",
      "   7   5.84708958e+01 -2.07102039e+03  1.36e+00 1.85e-13  2.86e-01     2s\n",
      "   8   1.79156458e+01 -1.63990105e+02  3.27e-01 8.35e-14  2.28e-02     2s\n",
      "   9   5.60018478e+00 -6.49973706e+00  9.10e-03 2.84e-14  1.47e-03     2s\n",
      "  10   4.77368736e+00 -3.16444253e+00  6.02e-03 3.62e-14  9.67e-04     2s\n",
      "  11   3.18415517e+00 -1.43382559e+00  2.14e-03 3.58e-14  5.62e-04     2s\n",
      "  12   2.35557803e+00 -4.16589356e-01  1.12e-03 2.46e-14  3.37e-04     2s\n",
      "  13   1.57357296e+00  1.58763019e-01  4.58e-04 2.66e-14  1.72e-04     2s\n",
      "  14   1.25238983e+00  3.59451631e-01  2.65e-04 2.94e-14  1.08e-04     2s\n",
      "  15   9.94044441e-01  5.03427852e-01  1.22e-04 3.49e-14  5.96e-05     2s\n",
      "  16   8.86315600e-01  6.35633540e-01  7.48e-05 3.60e-14  3.05e-05     2s\n",
      "  17   8.26346706e-01  6.66311889e-01  5.07e-05 3.37e-14  1.94e-05     2s\n",
      "  18   7.89450906e-01  6.75679107e-01  3.59e-05 3.34e-14  1.38e-05     2s\n",
      "  19   7.40224107e-01  6.87515681e-01  1.67e-05 2.90e-14  6.40e-06     2s\n",
      "  20   7.05399000e-01  6.92502999e-01  3.58e-06 2.94e-14  1.57e-06     2s\n",
      "  21   6.97531987e-01  6.94625578e-01  7.02e-07 2.97e-14  3.53e-07     2s\n",
      "\n",
      "Barrier performed 21 iterations in 1.69 seconds (2.10 work units)\n",
      "Barrier solve interrupted - model solved by another algorithm\n",
      "\n",
      "Concurrent spin time: 0.11s (can be avoided by choosing Method=3)\n",
      "\n",
      "Solved with dual simplex\n",
      "\n",
      "Use crossover to convert LP symmetric solution to basic solution...\n",
      "\n",
      "Root relaxation: objective 6.954735e-01, 4383 iterations, 0.38 seconds (0.30 work units)\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0    0.69547    0  414  862.90836    0.69547   100%     -    5s\n",
      "H    0     0                     686.3341818    0.69547   100%     -    8s\n",
      "H    0     0                     591.9061818    0.69547   100%     -   10s\n",
      "     0     0    0.70993    0  576  591.90618    0.70993   100%     -   12s\n",
      "H    0     0                     424.4661818    0.70993   100%     -   27s\n",
      "     0     0    0.73652    0  617  424.46618    0.73652   100%     -   30s\n",
      "     0     0    0.74508    0  598  424.46618    0.74508   100%     -   40s\n",
      "     0     0    0.74598    0  637  424.46618    0.74598   100%     -   44s\n",
      "     0     0    0.75629    0  600  424.46618    0.75629   100%     -   49s\n",
      "H    0     0                     320.8949091    0.75804   100%     -   54s\n",
      "     0     0    0.75804    0  631  320.89491    0.75804   100%     -   54s\n",
      "     0     0    0.77553    0  661  320.89491    0.77553   100%     -   61s\n",
      "H    0     0                     310.3854545    0.77796   100%     -   71s\n",
      "     0     0    0.77796    0  656  310.38545    0.77796   100%     -   71s\n",
      "     0     0    0.79205    0  665  310.38545    0.79205   100%     -   82s\n",
      "     0     0    0.79461    0  644  310.38545    0.79461   100%     -   89s\n",
      "H    0     0                     268.7043636    0.80494   100%     -   98s\n",
      "     0     0    0.80494    0  658  268.70436    0.80494   100%     -   98s\n",
      "\n",
      "Cutting planes:\n",
      "  Implied bound: 38\n",
      "  Clique: 69\n",
      "  MIR: 54\n",
      "  StrongCG: 8\n",
      "  Zero half: 17\n",
      "  Relax-and-lift: 14\n",
      "\n",
      "Explored 1 nodes (59725 simplex iterations) in 100.06 seconds (59.94 work units)\n",
      "Thread count was 12 (of 12 available processors)\n",
      "\n",
      "Solution count 8: 268.704 310.385 320.895 ... 863.052\n",
      "\n",
      "Time limit reached\n",
      "Best objective 2.687043636364e+02, best bound 8.049414507058e-01, gap 99.7004%\n",
      "                                                   z* = 268.7                                                   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Set iteration limit\n",
    "m.setParam(GRB.Param.TimeLimit, 100)  # Change to the desired iteration limit\n",
    "\n",
    "m.optimize()\n",
    "iteration = 1\n",
    "\n",
    "if m.status == GRB.INF_OR_UNBD:\n",
    "    m.setParam(GRB.Param.Presolve, 0)\n",
    "    m.optimize()\n",
    "\n",
    "if m.status == GRB.INFEASIBLE:\n",
    "    print(m.display(), \"\\n\\tTHERE IS NO SOLUTION!!!\")\n",
    "elif m.status == GRB.UNBOUNDED:\n",
    "    print(m.display(), \"\\n\\tNOT BOUNDED!!!\")\n",
    "else:\n",
    "    print(f'z* = {round(m.objVal, 2)}'.center(8*14))\n",
    "\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Transit time visualisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_blue_gradations(num_gradations):\n",
    "    gradations = []\n",
    "    for i in range(num_gradations):\n",
    "         # Linearly decrease the green component from full (255) to 0\n",
    "        green_intensity = int(255 * (1 - i / (num_gradations - 1)))\n",
    "        # Keep the red component at full intensity\n",
    "        red_intensity = 255\n",
    "        # Combine the components into a color value\n",
    "        color_value = f\"#{red_intensity:02X}{green_intensity:02X}00\"\n",
    "        gradations.append(color_value)\n",
    "    return gradations\n",
    "graduation = generate_blue_gradations(len(transit_times))\n",
    "transit_times = list(transit_times)\n",
    "transit_times.sort()\n",
    "color_transit = dict()\n",
    "for i in range(len(transit_times)):\n",
    "    color_transit[transit_times[i]] = graduation[-i-1]\n",
    "\n",
    "data1 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "data2 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "colors1 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "colors2 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "for i in range(1, number_of_rows + 1):\n",
    "    for j in range(1, number_of_columns + 1):\n",
    "        for k in range(1, len(Passengers) + 1):\n",
    "            if AssignmenVarDict[(i,j,k)].x == 1:\n",
    "                if j<4:\n",
    "                    data1[i-1][j-1] = k\n",
    "                    if Passengers[k]['transit']!=float('inf'): colors1[i-1][j-1] = color_transit[Passengers[k]['transit']]\n",
    "                elif j > 4 :\n",
    "                    data2[i-1][j-5] = k\n",
    "                    if Passengers[k]['transit']!=float('inf'): colors2[i-1][j-5] = color_transit[Passengers[k]['transit']]\n",
    "\n",
    "\n",
    "def create_table(ax, data, colors):\n",
    "    ax.set_axis_off()\n",
    "    table = Table(ax, bbox=[0, 0, 1, 2])\n",
    "    rows, cols = len(data), len(data[0])\n",
    "    width, height = 100 , 100 \n",
    "\n",
    "\n",
    "    for i in range(rows):\n",
    "        for j in range(cols):\n",
    "            table.add_cell(i, j, width, height, text=data[i][j], loc='center', facecolor=colors[i][j])\n",
    "\n",
    "    ax.add_table(table)\n",
    "\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2)\n",
    "\n",
    "create_table(ax1, data1, colors1)\n",
    "create_table(ax2, data2, colors2)\n",
    "\n",
    "\n",
    "ax1.annotate('Aisle', xy=(1, 1), xytext=(1.25, 1),\n",
    "             textcoords='axes fraction', ha='center', va='center', color='red', fontsize=14)\n",
    "\n",
    "\n",
    "\n",
    "plt.subplots_adjust(wspace=0.5)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Disabled visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "data1 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "data2 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "colors1 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "colors2 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "for i in range(1, number_of_rows + 1):\n",
    "    for j in range(1, number_of_columns + 1):\n",
    "        for k in range(1, len(Passengers) + 1):\n",
    "            if AssignmenVarDict[(i,j,k)].x == 1:\n",
    "                if j<4:\n",
    "                    data1[i-1][j-1] = k\n",
    "                    if Passengers[k]['type']==2 :\n",
    "                        colors1[i-1][j-1] = '#800080'\n",
    "                        colors1[i-1][j-2] = '#800080'\n",
    "                        colors1[i][j-1] = '#800080'\n",
    "                        colors1[i][j-2] = '#800080'\n",
    "                elif j>4:\n",
    "                    data2[i-1][j-5] = k\n",
    "                    if Passengers[k]['type']==2:\n",
    "                        colors2[i-1][j-5] = '#800080'\n",
    "                        colors2[i-1][j-6] = '#800080'\n",
    "                        colors2[i][j-5] = '#800080'\n",
    "                        colors2[i][j-6] = '#800080'\n",
    "\n",
    "def create_table(ax, data, colors):\n",
    "    ax.set_axis_off()\n",
    "    table = Table(ax, bbox=[0, 0, 1, 2])\n",
    "    rows, cols = len(data), len(data[0])\n",
    "    width, height = 100 , 100 \n",
    "\n",
    "\n",
    "    for i in range(rows):\n",
    "        for j in range(cols):\n",
    "            table.add_cell(i, j, width, height, text=data[i][j], loc='center', facecolor=colors[i][j])\n",
    "\n",
    "    ax.add_table(table)\n",
    "\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2)\n",
    "\n",
    "create_table(ax1, data1, colors1)\n",
    "create_table(ax2, data2, colors2)\n",
    "\n",
    "\n",
    "ax1.annotate('Aisle', xy=(1, 1), xytext=(1.25, 1),\n",
    "             textcoords='axes fraction', ha='center', va='center', color='red', fontsize=14)\n",
    "\n",
    "\n",
    "\n",
    "plt.subplots_adjust(wspace=0.5)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Groups vizualisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def generate_random_colors(num_colors):\n",
    "    colors = []\n",
    "    for _ in range(num_colors):\n",
    "\n",
    "        red = random.randint(0, 255)\n",
    "        green = random.randint(0, 255)\n",
    "        blue = random.randint(0, 255)\n",
    "\n",
    "        color_value = \"#{:02X}{:02X}{:02X}\".format(red, green, blue)\n",
    "        colors.append(color_value)\n",
    "    return colors\n",
    "\n",
    "graduation = generate_random_colors(len(Groups))\n",
    "indices_groups = list(Groups.keys())\n",
    "color_group = {indices_groups[i-1] : graduation[i-1] for i in range(1, len(Groups)+1) }\n",
    "\n",
    "\n",
    "data1 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "data2 = [['Empty' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "colors1 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "colors2 = [[ '#FFFFFF' for _ in range(number_of_columns//2)] for _ in range(number_of_rows)]\n",
    "\n",
    "for i in range(1, number_of_rows + 1):\n",
    "    for j in range(1, number_of_columns + 1):\n",
    "        for k in range(1, len(Passengers) + 1):\n",
    "            if AssignmenVarDict[(i,j,k)].x == 1:\n",
    "                if j<4:\n",
    "                    data1[i-1][j-1] = f\"{k} g{Passengers[k]['group']}\"\n",
    "                    if Passengers[k]['group']in color_group: colors1[i-1][j-1] = color_group[Passengers[k]['group']]\n",
    "                else:\n",
    "                    data2[i-1][j-5] = f\"{k} g{Passengers[k]['group']}\"\n",
    "                    if Passengers[k]['group'] in color_group: colors2[i-1][j-5] = color_group[Passengers[k]['group']]\n",
    "\n",
    "                    \n",
    "def create_table(ax, data, colors):\n",
    "    ax.set_axis_off()\n",
    "    table = Table(ax, bbox=[0, 0, 1, 2])\n",
    "    rows, cols = len(data), len(data[0])\n",
    "    width, height = 100 , 100 \n",
    "\n",
    "\n",
    "    for i in range(rows):\n",
    "        for j in range(cols):\n",
    "            table.add_cell(i, j, width, height, text=data[i][j], loc='center', facecolor=colors[i][j])\n",
    "\n",
    "    ax.add_table(table)\n",
    "\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2)\n",
    "\n",
    "create_table(ax1, data1, colors1)\n",
    "create_table(ax2, data2, colors2)\n",
    "\n",
    "\n",
    "ax1.annotate('Aisle', xy=(1, 1), xytext=(1.25, 1),\n",
    "             textcoords='axes fraction', ha='center', va='center', color='red', fontsize=14)\n",
    "\n",
    "\n",
    "\n",
    "plt.subplots_adjust(wspace=0.5)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Transit metric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The satisfaction level related to transit time: 34.60076045627377  %\n"
     ]
    }
   ],
   "source": [
    "\n",
    "z_new = round(transit_obj.getValue(), 2)\n",
    "\n",
    "\n",
    "print(\"The satisfaction level related to transit time:\", (1- (z_new- z_old)/z_old) * 100, \" %\" )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Grouping metric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 5]\n",
      "** Le passager 4 est assis à la position (7, 7)\n",
      "Pass 4, Seat (7, 7), Neighbor (7, 6), True\n",
      "** Passager 4 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 5 est assis à la position (7, 6)\n",
      "Pass 5, Seat (7, 6), Neighbor (7, 5), False\n",
      "Pass 5, Seat (7, 6), Neighbor (7, 7), True\n",
      "** Passager 5 -- satisfaction 1.0\n",
      "\n",
      "[7, 8]\n",
      "** Le passager 7 est assis à la position (6, 2)\n",
      "Pass 7, Seat (6, 2), Neighbor (6, 1), True\n",
      "Pass 7, Seat (6, 2), Neighbor (6, 3), False\n",
      "** Passager 7 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 8 est assis à la position (6, 1)\n",
      "Pass 8, Seat (6, 1), Neighbor (6, 2), True\n",
      "** Passager 8 -- satisfaction 1.0\n",
      "\n",
      "[10, 11, 12, 13, 14]\n",
      "** Le passager 10 est assis à la position (15, 7)\n",
      "Pass 10, Seat (15, 7), Neighbor (15, 6), True\n",
      "** Passager 10 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 11 est assis à la position (15, 3)\n",
      "Pass 11, Seat (15, 3), Neighbor (15, 2), False\n",
      "** Passager 11 -- satisfaction 0\n",
      "\n",
      "** Le passager 12 est assis à la position (16, 5)\n",
      "Pass 12, Seat (16, 5), Neighbor (16, 6), False\n",
      "** Passager 12 -- satisfaction 0\n",
      "\n",
      "** Le passager 13 est assis à la position (15, 6)\n",
      "Pass 13, Seat (15, 6), Neighbor (15, 5), False\n",
      "Pass 13, Seat (15, 6), Neighbor (15, 7), True\n",
      "** Passager 13 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 14 est assis à la position (16, 3)\n",
      "Pass 14, Seat (16, 3), Neighbor (16, 2), False\n",
      "** Passager 14 -- satisfaction 0\n",
      "\n",
      "[15, 16, 17, 18]\n",
      "** Le passager 15 est assis à la position (16, 6)\n",
      "Pass 15, Seat (16, 6), Neighbor (16, 5), False\n",
      "Pass 15, Seat (16, 6), Neighbor (16, 7), True\n",
      "** Passager 15 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 16 est assis à la position (17, 5)\n",
      "Pass 16, Seat (17, 5), Neighbor (17, 6), False\n",
      "** Passager 16 -- satisfaction 0\n",
      "\n",
      "** Le passager 17 est assis à la position (17, 7)\n",
      "Pass 17, Seat (17, 7), Neighbor (17, 6), False\n",
      "** Passager 17 -- satisfaction 0\n",
      "\n",
      "** Le passager 18 est assis à la position (16, 7)\n",
      "Pass 18, Seat (16, 7), Neighbor (16, 6), True\n",
      "** Passager 18 -- satisfaction 1.0\n",
      "\n",
      "[20, 21]\n",
      "** Le passager 20 est assis à la position (13, 2)\n",
      "Pass 20, Seat (13, 2), Neighbor (13, 1), True\n",
      "Pass 20, Seat (13, 2), Neighbor (13, 3), False\n",
      "** Passager 20 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 21 est assis à la position (13, 1)\n",
      "Pass 21, Seat (13, 1), Neighbor (13, 2), True\n",
      "** Passager 21 -- satisfaction 1.0\n",
      "\n",
      "[22, 23, 24, 25, 26]\n",
      "** Le passager 22 est assis à la position (25, 2)\n",
      "Pass 22, Seat (25, 2), Neighbor (25, 1), False\n",
      "Pass 22, Seat (25, 2), Neighbor (25, 3), True\n",
      "** Passager 22 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 23 est assis à la position (25, 3)\n",
      "Pass 23, Seat (25, 3), Neighbor (25, 2), True\n",
      "** Passager 23 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 24 est assis à la position (24, 2)\n",
      "Pass 24, Seat (24, 2), Neighbor (24, 1), True\n",
      "Pass 24, Seat (24, 2), Neighbor (24, 3), False\n",
      "** Passager 24 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 25 est assis à la position (25, 6)\n",
      "Pass 25, Seat (25, 6), Neighbor (25, 5), False\n",
      "Pass 25, Seat (25, 6), Neighbor (25, 7), False\n",
      "** Passager 25 -- satisfaction 0\n",
      "\n",
      "** Le passager 26 est assis à la position (24, 1)\n",
      "Pass 26, Seat (24, 1), Neighbor (24, 2), True\n",
      "** Passager 26 -- satisfaction 1.0\n",
      "\n",
      "[27, 28, 29, 30]\n",
      "** Le passager 27 est assis à la position (10, 6)\n",
      "Pass 27, Seat (10, 6), Neighbor (10, 5), False\n",
      "Pass 27, Seat (10, 6), Neighbor (10, 7), False\n",
      "** Passager 27 -- satisfaction 0\n",
      "\n",
      "** Le passager 28 est assis à la position (8, 6)\n",
      "Pass 28, Seat (8, 6), Neighbor (8, 5), False\n",
      "Pass 28, Seat (8, 6), Neighbor (8, 7), False\n",
      "** Passager 28 -- satisfaction 0\n",
      "\n",
      "** Le passager 29 est assis à la position (19, 3)\n",
      "Pass 29, Seat (19, 3), Neighbor (19, 2), False\n",
      "** Passager 29 -- satisfaction 0\n",
      "\n",
      "** Le passager 30 est assis à la position (17, 3)\n",
      "Pass 30, Seat (17, 3), Neighbor (17, 2), False\n",
      "** Passager 30 -- satisfaction 0\n",
      "\n",
      "[31, 32, 33, 34, 35]\n",
      "** Le passager 31 est assis à la position (2, 2)\n",
      "Pass 31, Seat (2, 2), Neighbor (2, 1), False\n",
      "Pass 31, Seat (2, 2), Neighbor (2, 3), True\n",
      "** Passager 31 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 32 est assis à la position (2, 3)\n",
      "Pass 32, Seat (2, 3), Neighbor (2, 2), True\n",
      "** Passager 32 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 33 est assis à la position (2, 7)\n",
      "Pass 33, Seat (2, 7), Neighbor (2, 6), True\n",
      "** Passager 33 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 34 est assis à la position (2, 6)\n",
      "Pass 34, Seat (2, 6), Neighbor (2, 5), True\n",
      "Pass 34, Seat (2, 6), Neighbor (2, 7), True\n",
      "** Passager 34 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 35 est assis à la position (2, 5)\n",
      "Pass 35, Seat (2, 5), Neighbor (2, 6), True\n",
      "** Passager 35 -- satisfaction 1.0\n",
      "\n",
      "[38, 39]\n",
      "** Le passager 38 est assis à la position (28, 2)\n",
      "Pass 38, Seat (28, 2), Neighbor (28, 1), False\n",
      "Pass 38, Seat (28, 2), Neighbor (28, 3), True\n",
      "** Passager 38 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 39 est assis à la position (28, 3)\n",
      "Pass 39, Seat (28, 3), Neighbor (28, 2), True\n",
      "** Passager 39 -- satisfaction 1.0\n",
      "\n",
      "[40, 41, 42, 43, 44]\n",
      "** Le passager 40 est assis à la position (5, 2)\n",
      "Pass 40, Seat (5, 2), Neighbor (5, 1), True\n",
      "Pass 40, Seat (5, 2), Neighbor (5, 3), False\n",
      "** Passager 40 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 41 est assis à la position (4, 2)\n",
      "Pass 41, Seat (4, 2), Neighbor (4, 1), True\n",
      "Pass 41, Seat (4, 2), Neighbor (4, 3), False\n",
      "** Passager 41 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 42 est assis à la position (4, 7)\n",
      "Pass 42, Seat (4, 7), Neighbor (4, 6), False\n",
      "** Passager 42 -- satisfaction 0\n",
      "\n",
      "** Le passager 43 est assis à la position (4, 1)\n",
      "Pass 43, Seat (4, 1), Neighbor (4, 2), True\n",
      "** Passager 43 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 44 est assis à la position (5, 1)\n",
      "Pass 44, Seat (5, 1), Neighbor (5, 2), True\n",
      "** Passager 44 -- satisfaction 1.0\n",
      "\n",
      "[46, 47]\n",
      "** Le passager 46 est assis à la position (3, 2)\n",
      "Pass 46, Seat (3, 2), Neighbor (3, 1), False\n",
      "Pass 46, Seat (3, 2), Neighbor (3, 3), True\n",
      "** Passager 46 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 47 est assis à la position (3, 3)\n",
      "Pass 47, Seat (3, 3), Neighbor (3, 2), True\n",
      "** Passager 47 -- satisfaction 1.0\n",
      "\n",
      "[50, 51, 52]\n",
      "** Le passager 50 est assis à la position (1, 7)\n",
      "Pass 50, Seat (1, 7), Neighbor (1, 6), True\n",
      "** Passager 50 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 51 est assis à la position (1, 5)\n",
      "Pass 51, Seat (1, 5), Neighbor (1, 6), True\n",
      "** Passager 51 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 52 est assis à la position (1, 6)\n",
      "Pass 52, Seat (1, 6), Neighbor (1, 5), True\n",
      "Pass 52, Seat (1, 6), Neighbor (1, 7), True\n",
      "** Passager 52 -- satisfaction 1.0\n",
      "\n",
      "[53, 54, 55, 56]\n",
      "** Le passager 53 est assis à la position (5, 7)\n",
      "Pass 53, Seat (5, 7), Neighbor (5, 6), True\n",
      "** Passager 53 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 54 est assis à la position (5, 3)\n",
      "Pass 54, Seat (5, 3), Neighbor (5, 2), False\n",
      "** Passager 54 -- satisfaction 0\n",
      "\n",
      "** Le passager 55 est assis à la position (5, 6)\n",
      "Pass 55, Seat (5, 6), Neighbor (5, 5), True\n",
      "Pass 55, Seat (5, 6), Neighbor (5, 7), True\n",
      "** Passager 55 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 56 est assis à la position (5, 5)\n",
      "Pass 56, Seat (5, 5), Neighbor (5, 6), True\n",
      "** Passager 56 -- satisfaction 1.0\n",
      "\n",
      "[58, 59, 60]\n",
      "** Le passager 58 est assis à la position (7, 1)\n",
      "Pass 58, Seat (7, 1), Neighbor (7, 2), False\n",
      "** Passager 58 -- satisfaction 0\n",
      "\n",
      "** Le passager 59 est assis à la position (9, 3)\n",
      "Pass 59, Seat (9, 3), Neighbor (9, 2), False\n",
      "** Passager 59 -- satisfaction 0\n",
      "\n",
      "** Le passager 60 est assis à la position (7, 3)\n",
      "Pass 60, Seat (7, 3), Neighbor (7, 2), False\n",
      "** Passager 60 -- satisfaction 0\n",
      "\n",
      "[61, 62]\n",
      "** Le passager 61 est assis à la position (15, 1)\n",
      "Pass 61, Seat (15, 1), Neighbor (15, 2), True\n",
      "** Passager 61 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 62 est assis à la position (15, 2)\n",
      "Pass 62, Seat (15, 2), Neighbor (15, 1), True\n",
      "Pass 62, Seat (15, 2), Neighbor (15, 3), False\n",
      "** Passager 62 -- satisfaction 1.0\n",
      "\n",
      "[71, 72]\n",
      "** Le passager 71 est assis à la position (29, 1)\n",
      "Pass 71, Seat (29, 1), Neighbor (29, 2), False\n",
      "** Passager 71 -- satisfaction 0\n",
      "\n",
      "** Le passager 72 est assis à la position (29, 3)\n",
      "Pass 72, Seat (29, 3), Neighbor (29, 2), False\n",
      "** Passager 72 -- satisfaction 0\n",
      "\n",
      "[74, 75, 76]\n",
      "** Le passager 74 est assis à la position (11, 7)\n",
      "Pass 74, Seat (11, 7), Neighbor (11, 6), True\n",
      "** Passager 74 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 75 est assis à la position (11, 6)\n",
      "Pass 75, Seat (11, 6), Neighbor (11, 5), False\n",
      "Pass 75, Seat (11, 6), Neighbor (11, 7), True\n",
      "** Passager 75 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 76 est assis à la position (11, 3)\n",
      "Pass 76, Seat (11, 3), Neighbor (11, 2), False\n",
      "** Passager 76 -- satisfaction 0\n",
      "\n",
      "[77, 78]\n",
      "** Le passager 77 est assis à la position (14, 3)\n",
      "Pass 77, Seat (14, 3), Neighbor (14, 2), False\n",
      "** Passager 77 -- satisfaction 0\n",
      "\n",
      "** Le passager 78 est assis à la position (15, 5)\n",
      "Pass 78, Seat (15, 5), Neighbor (15, 6), False\n",
      "** Passager 78 -- satisfaction 0\n",
      "\n",
      "[80, 81]\n",
      "** Le passager 80 est assis à la position (22, 6)\n",
      "Pass 80, Seat (22, 6), Neighbor (22, 5), False\n",
      "Pass 80, Seat (22, 6), Neighbor (22, 7), False\n",
      "** Passager 80 -- satisfaction 0\n",
      "\n",
      "** Le passager 81 est assis à la position (23, 5)\n",
      "Pass 81, Seat (23, 5), Neighbor (23, 6), False\n",
      "** Passager 81 -- satisfaction 0\n",
      "\n",
      "[82, 83]\n",
      "** Le passager 82 est assis à la position (1, 2)\n",
      "Pass 82, Seat (1, 2), Neighbor (1, 1), False\n",
      "Pass 82, Seat (1, 2), Neighbor (1, 3), True\n",
      "** Passager 82 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 83 est assis à la position (1, 3)\n",
      "Pass 83, Seat (1, 3), Neighbor (1, 2), True\n",
      "** Passager 83 -- satisfaction 1.0\n",
      "\n",
      "[87, 88, 89, 90, 91]\n",
      "** Le passager 87 est assis à la position (27, 3)\n",
      "Pass 87, Seat (27, 3), Neighbor (27, 2), False\n",
      "** Passager 87 -- satisfaction 0\n",
      "\n",
      "** Le passager 88 est assis à la position (26, 6)\n",
      "Pass 88, Seat (26, 6), Neighbor (26, 5), True\n",
      "Pass 88, Seat (26, 6), Neighbor (26, 7), False\n",
      "** Passager 88 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 89 est assis à la position (26, 5)\n",
      "Pass 89, Seat (26, 5), Neighbor (26, 6), True\n",
      "** Passager 89 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 90 est assis à la position (27, 6)\n",
      "Pass 90, Seat (27, 6), Neighbor (27, 5), True\n",
      "Pass 90, Seat (27, 6), Neighbor (27, 7), False\n",
      "** Passager 90 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 91 est assis à la position (27, 5)\n",
      "Pass 91, Seat (27, 5), Neighbor (27, 6), True\n",
      "** Passager 91 -- satisfaction 1.0\n",
      "\n",
      "[96, 97]\n",
      "** Le passager 96 est assis à la position (30, 3)\n",
      "Pass 96, Seat (30, 3), Neighbor (30, 2), False\n",
      "** Passager 96 -- satisfaction 0\n",
      "\n",
      "** Le passager 97 est assis à la position (30, 6)\n",
      "Pass 97, Seat (30, 6), Neighbor (30, 5), False\n",
      "Pass 97, Seat (30, 6), Neighbor (30, 7), False\n",
      "** Passager 97 -- satisfaction 0\n",
      "\n",
      "[103, 104, 105, 106]\n",
      "** Le passager 103 est assis à la position (23, 3)\n",
      "Pass 103, Seat (23, 3), Neighbor (23, 2), True\n",
      "** Passager 103 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 104 est assis à la position (23, 2)\n",
      "Pass 104, Seat (23, 2), Neighbor (23, 1), True\n",
      "Pass 104, Seat (23, 2), Neighbor (23, 3), True\n",
      "** Passager 104 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 105 est assis à la position (23, 6)\n",
      "Pass 105, Seat (23, 6), Neighbor (23, 5), False\n",
      "Pass 105, Seat (23, 6), Neighbor (23, 7), False\n",
      "** Passager 105 -- satisfaction 0\n",
      "\n",
      "** Le passager 106 est assis à la position (23, 1)\n",
      "Pass 106, Seat (23, 1), Neighbor (23, 2), True\n",
      "** Passager 106 -- satisfaction 1.0\n",
      "\n",
      "[109, 110]\n",
      "** Le passager 109 est assis à la position (22, 3)\n",
      "Pass 109, Seat (22, 3), Neighbor (22, 2), True\n",
      "** Passager 109 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 110 est assis à la position (22, 2)\n",
      "Pass 110, Seat (22, 2), Neighbor (22, 1), False\n",
      "Pass 110, Seat (22, 2), Neighbor (22, 3), True\n",
      "** Passager 110 -- satisfaction 1.0\n",
      "\n",
      "[115, 116, 117, 118]\n",
      "** Le passager 115 est assis à la position (13, 6)\n",
      "Pass 115, Seat (13, 6), Neighbor (13, 5), False\n",
      "Pass 115, Seat (13, 6), Neighbor (13, 7), False\n",
      "** Passager 115 -- satisfaction 0\n",
      "\n",
      "** Le passager 116 est assis à la position (12, 5)\n",
      "Pass 116, Seat (12, 5), Neighbor (12, 6), False\n",
      "** Passager 116 -- satisfaction 0\n",
      "\n",
      "** Le passager 117 est assis à la position (10, 5)\n",
      "Pass 117, Seat (10, 5), Neighbor (10, 6), False\n",
      "** Passager 117 -- satisfaction 0\n",
      "\n",
      "** Le passager 118 est assis à la position (11, 2)\n",
      "Pass 118, Seat (11, 2), Neighbor (11, 1), False\n",
      "Pass 118, Seat (11, 2), Neighbor (11, 3), False\n",
      "** Passager 118 -- satisfaction 0\n",
      "\n",
      "[120, 121]\n",
      "** Le passager 120 est assis à la position (13, 7)\n",
      "Pass 120, Seat (13, 7), Neighbor (13, 6), False\n",
      "** Passager 120 -- satisfaction 0\n",
      "\n",
      "** Le passager 121 est assis à la position (14, 2)\n",
      "Pass 121, Seat (14, 2), Neighbor (14, 1), False\n",
      "Pass 121, Seat (14, 2), Neighbor (14, 3), False\n",
      "** Passager 121 -- satisfaction 0\n",
      "\n",
      "[127, 128]\n",
      "** Le passager 127 est assis à la position (6, 6)\n",
      "Pass 127, Seat (6, 6), Neighbor (6, 5), True\n",
      "Pass 127, Seat (6, 6), Neighbor (6, 7), False\n",
      "** Passager 127 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 128 est assis à la position (6, 5)\n",
      "Pass 128, Seat (6, 5), Neighbor (6, 6), True\n",
      "** Passager 128 -- satisfaction 1.0\n",
      "\n",
      "[129, 130, 131]\n",
      "** Le passager 129 est assis à la position (21, 7)\n",
      "Pass 129, Seat (21, 7), Neighbor (21, 6), True\n",
      "** Passager 129 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 130 est assis à la position (21, 6)\n",
      "Pass 130, Seat (21, 6), Neighbor (21, 5), False\n",
      "Pass 130, Seat (21, 6), Neighbor (21, 7), True\n",
      "** Passager 130 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 131 est assis à la position (22, 5)\n",
      "Pass 131, Seat (22, 5), Neighbor (22, 6), False\n",
      "** Passager 131 -- satisfaction 0\n",
      "\n",
      "[132, 133, 134]\n",
      "** Le passager 132 est assis à la position (24, 6)\n",
      "Pass 132, Seat (24, 6), Neighbor (24, 5), True\n",
      "Pass 132, Seat (24, 6), Neighbor (24, 7), True\n",
      "** Passager 132 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 133 est assis à la position (24, 5)\n",
      "Pass 133, Seat (24, 5), Neighbor (24, 6), True\n",
      "** Passager 133 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 134 est assis à la position (24, 7)\n",
      "Pass 134, Seat (24, 7), Neighbor (24, 6), True\n",
      "** Passager 134 -- satisfaction 1.0\n",
      "\n",
      "[135, 136]\n",
      "** Le passager 135 est assis à la position (14, 7)\n",
      "Pass 135, Seat (14, 7), Neighbor (14, 6), True\n",
      "** Passager 135 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 136 est assis à la position (14, 6)\n",
      "Pass 136, Seat (14, 6), Neighbor (14, 5), False\n",
      "Pass 136, Seat (14, 6), Neighbor (14, 7), True\n",
      "** Passager 136 -- satisfaction 1.0\n",
      "\n",
      "[139, 140]\n",
      "** Le passager 139 est assis à la position (17, 6)\n",
      "Pass 139, Seat (17, 6), Neighbor (17, 5), False\n",
      "Pass 139, Seat (17, 6), Neighbor (17, 7), False\n",
      "** Passager 139 -- satisfaction 0\n",
      "\n",
      "** Le passager 140 est assis à la position (13, 5)\n",
      "Pass 140, Seat (13, 5), Neighbor (13, 6), False\n",
      "** Passager 140 -- satisfaction 0\n",
      "\n",
      "[142, 143]\n",
      "** Le passager 142 est assis à la position (4, 5)\n",
      "Pass 142, Seat (4, 5), Neighbor (4, 6), True\n",
      "** Passager 142 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 143 est assis à la position (4, 6)\n",
      "Pass 143, Seat (4, 6), Neighbor (4, 5), True\n",
      "Pass 143, Seat (4, 6), Neighbor (4, 7), False\n",
      "** Passager 143 -- satisfaction 1.0\n",
      "\n",
      "[144, 145, 146]\n",
      "** Le passager 144 est assis à la position (12, 7)\n",
      "Pass 144, Seat (12, 7), Neighbor (12, 6), True\n",
      "** Passager 144 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 145 est assis à la position (12, 3)\n",
      "Pass 145, Seat (12, 3), Neighbor (12, 2), False\n",
      "** Passager 145 -- satisfaction 0\n",
      "\n",
      "** Le passager 146 est assis à la position (12, 6)\n",
      "Pass 146, Seat (12, 6), Neighbor (12, 5), False\n",
      "Pass 146, Seat (12, 6), Neighbor (12, 7), True\n",
      "** Passager 146 -- satisfaction 1.0\n",
      "\n",
      "[147, 148, 149]\n",
      "** Le passager 147 est assis à la position (20, 6)\n",
      "Pass 147, Seat (20, 6), Neighbor (20, 5), True\n",
      "Pass 147, Seat (20, 6), Neighbor (20, 7), True\n",
      "** Passager 147 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 148 est assis à la position (20, 7)\n",
      "Pass 148, Seat (20, 7), Neighbor (20, 6), True\n",
      "** Passager 148 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 149 est assis à la position (20, 5)\n",
      "Pass 149, Seat (20, 5), Neighbor (20, 6), True\n",
      "** Passager 149 -- satisfaction 1.0\n",
      "\n",
      "[150, 151]\n",
      "** Le passager 150 est assis à la position (21, 2)\n",
      "Pass 150, Seat (21, 2), Neighbor (21, 1), True\n",
      "Pass 150, Seat (21, 2), Neighbor (21, 3), False\n",
      "** Passager 150 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 151 est assis à la position (21, 1)\n",
      "Pass 151, Seat (21, 1), Neighbor (21, 2), True\n",
      "** Passager 151 -- satisfaction 1.0\n",
      "\n",
      "[152, 153]\n",
      "** Le passager 152 est assis à la position (18, 6)\n",
      "Pass 152, Seat (18, 6), Neighbor (18, 5), False\n",
      "Pass 152, Seat (18, 6), Neighbor (18, 7), True\n",
      "** Passager 152 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 153 est assis à la position (18, 7)\n",
      "Pass 153, Seat (18, 7), Neighbor (18, 6), True\n",
      "** Passager 153 -- satisfaction 1.0\n",
      "\n",
      "[154, 155]\n",
      "** Le passager 154 est assis à la position (33, 1)\n",
      "Pass 154, Seat (33, 1), Neighbor (33, 2), False\n",
      "** Passager 154 -- satisfaction 0\n",
      "\n",
      "** Le passager 155 est assis à la position (33, 3)\n",
      "Pass 155, Seat (33, 3), Neighbor (33, 2), False\n",
      "** Passager 155 -- satisfaction 0\n",
      "\n",
      "[157, 158, 159]\n",
      "** Le passager 157 est assis à la position (35, 2)\n",
      "Pass 157, Seat (35, 2), Neighbor (35, 1), True\n",
      "Pass 157, Seat (35, 2), Neighbor (35, 3), True\n",
      "** Passager 157 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 158 est assis à la position (35, 3)\n",
      "Pass 158, Seat (35, 3), Neighbor (35, 2), True\n",
      "** Passager 158 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 159 est assis à la position (35, 1)\n",
      "Pass 159, Seat (35, 1), Neighbor (35, 2), True\n",
      "** Passager 159 -- satisfaction 1.0\n",
      "\n",
      "[160, 161, 162]\n",
      "** Le passager 160 est assis à la position (26, 3)\n",
      "Pass 160, Seat (26, 3), Neighbor (26, 2), True\n",
      "** Passager 160 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 161 est assis à la position (26, 1)\n",
      "Pass 161, Seat (26, 1), Neighbor (26, 2), True\n",
      "** Passager 161 -- satisfaction 1.0\n",
      "\n",
      "** Le passager 162 est assis à la position (26, 2)\n",
      "Pass 162, Seat (26, 2), Neighbor (26, 1), True\n",
      "Pass 162, Seat (26, 2), Neighbor (26, 3), True\n",
      "** Passager 162 -- satisfaction 1.0\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "76.5432098765432"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Définition des constantes pour les niveaux de satisfaction\n",
    "SATISFIED = 1.0\n",
    "MEDIUM_SATISFIED = 0.5\n",
    "NOT_SATISFIED = 0.0\n",
    "\n",
    "# Initialisation des variables pour les scores de satisfaction\n",
    "satisfaction_scores = []\n",
    "\n",
    "for group, passengers in Groups.items():\n",
    "    print(passengers)\n",
    "    for pass_id in passengers:\n",
    "        seat_positions = [(i, j) for i in range(1, number_of_rows+1)\n",
    "                            for j in range(1, number_of_columns+1)\n",
    "                            if AssignmenVarDict.get((i, j, pass_id), 0).x == 1]\n",
    "        if seat_positions:  # Vérifie si la liste n'est pas vide\n",
    "            seat_position = seat_positions[0]  # Prend le premier élément\n",
    "            print(f\"** Le passager {pass_id} est assis à la position {seat_position}\")\n",
    "        else:\n",
    "            print(f\"Aucun siège trouvé pour le passager {pass_id}. Vérifiez l'indexation et les données.\")\n",
    "            \n",
    "        i, j = seat_position\n",
    "        neighbors = [(i, j-1), (i, j+1)]\n",
    "        satisfaction = 0\n",
    "        for neighbor in neighbors:\n",
    "            ni, nj = neighbor\n",
    "            if 1 <= nj <= number_of_columns:\n",
    "                if nj == 4 or j == 4:  # S'ils sont séparés par l'allée, attribuez MEDIUM_SATISFIED seulement si dans la même rangée\n",
    "                    if any(AssignmenVarDict.get((ni, nj, other_pass_id), 0).x == 1 for other_pass_id in passengers if other_pass_id != pass_id):\n",
    "                        print(f\"Pass {pass_id}, Seat {i, j}, Neighbor {neighbor}, Medium\")\n",
    "                        satisfaction = max(satisfaction, MEDIUM_SATISFIED)\n",
    "                elif nj != 4:\n",
    "                    if any(AssignmenVarDict.get((ni, nj, other_pass_id), 0).x == 1 for other_pass_id in passengers if (other_pass_id != pass_id and ni == i)):\n",
    "                        print(f\"Pass {pass_id}, Seat {i, j}, Neighbor {neighbor}, True\")\n",
    "                        satisfaction = max(satisfaction, SATISFIED)\n",
    "                    else :\n",
    "                        print(f\"Pass {pass_id}, Seat {i, j}, Neighbor {neighbor}, False\")\n",
    "                        satisfaction = max(satisfaction, NOT_SATISFIED)\n",
    "        satisfaction_scores.append(satisfaction)\n",
    "        print(f\"** Passager {pass_id} -- satisfaction {satisfaction}\\n\")\n",
    "\n",
    "for pass_id in range(1, len(Passengers) + 1):\n",
    "    if all(pass_id not in passengers for _, passengers in Groups.items()):\n",
    "        # Ce passager est seul\n",
    "        # print(f\"Le passager {pass_id} est seul et est automatiquement SATISFIED.\")\n",
    "        satisfaction_scores.append(SATISFIED)\n",
    "\n",
    "# Calcul du score de groupement moyen (pourcentage de satisfaction)\n",
    "grouping_score = sum(satisfaction_scores) / len(satisfaction_scores)\n",
    "\n",
    "# Retourner le score de groupement en pourcentage\n",
    "grouping_score_percentage = grouping_score * 100\n",
    "grouping_score_percentage\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
